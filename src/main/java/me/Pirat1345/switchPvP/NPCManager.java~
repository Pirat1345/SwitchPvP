package me.Pirat1345.switchPvP;

import com.destroystokyo.paper.profile.PlayerProfile;
import com.destroystokyo.paper.profile.ProfileProperty;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mojang.authlib.GameProfile;
import com.mojang.authlib.properties.Property;
import net.minecraft.network.protocol.game.*;
import net.minecraft.network.syncher.EntityDataAccessor;
import net.minecraft.network.syncher.EntityDataSerializers;
import net.minecraft.network.syncher.SynchedEntityData;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.server.network.ServerGamePacketListenerImpl;
import net.minecraft.world.entity.EquipmentSlot;
import net.minecraft.world.item.ItemStack;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.craftbukkit.v1_21_R3.CraftServer;
import org.bukkit.craftbukkit.v1_21_R3.CraftWorld;
import org.bukkit.craftbukkit.v1_21_R3.entity.CraftPlayer;
import org.bukkit.craftbukkit.v1_21_R3.inventory.CraftItemStack;
import org.bukkit.entity.Player;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.*;

public class NPCManager {
    private static final String PROFILE_URL = "https://api.mojang.com/users/profiles/minecraft/";
    private static final String SKIN_URL = "https://sessionserver.mojang.com/session/minecraft/profile/%s?unsigned=false";
    private static final Map<String, ProfileProperty> skinCache = new HashMap<>();

    private final SwitchPvP plugin;
    private ServerPlayer npcEntity;
    private Location npcLocation;
    private String currentChampionName = "";
    private int currentChampionKills = 0;

    public NPCManager(SwitchPvP plugin) {
        this.plugin = plugin;
    }

    public void createChampionNPC(Location location, String playerName, int kills) {
        this.npcLocation = location;
        this.currentChampionName = playerName;
        this.currentChampionKills = kills;

        // Remove existing NPC if any
        removeNPC();

        // Create new NPC
        createNPC(playerName, kills);
    }

    public void updateChampionNPC(String playerName, int kills) {
        if (!playerName.equals(currentChampionName) || kills != currentChampionKills) {
            this.currentChampionName = playerName;
            this.currentChampionKills = kills;

            if (npcLocation != null) {
                // Remove old NPC
                removeNPC();
                // Create new NPC with updated info
                createNPC(playerName, kills);
            }
        }
    }

    private void createNPC(String playerName, int kills) {
        if (npcLocation == null || playerName.equals("Unknown")) return;

        try {
            // Get server and world
            MinecraftServer server = ((CraftServer) Bukkit.getServer()).getServer();
            ServerLevel world = ((CraftWorld) npcLocation.getWorld()).getHandle();

            // Create GameProfile with skin
            GameProfile gameProfile = new GameProfile(UUID.randomUUID(), playerName);
            ProfileProperty skinProperty = getSkinProperty(playerName);

            if (skinProperty != null) {
                gameProfile.getProperties().put("textures",
                        new Property("textures", skinProperty.getValue(), skinProperty.getSignature()));
            }

            // Create ServerPlayer (NPC)
            npcEntity = new ServerPlayer(server, world, gameProfile);

            // Set position
            npcEntity.setPos(npcLocation.getX(), npcLocation.getY(), npcLocation.getZ());
            npcEntity.setYRot(npcLocation.getYaw());
            npcEntity.setXRot(npcLocation.getPitch());

            // Set custom name
            npcEntity.setCustomName(net.minecraft.network.chat.Component.literal(
                    ChatColor.GOLD + "ðŸ‘‘ " + playerName + ChatColor.YELLOW + " (" + kills + " kills)"));
            npcEntity.setCustomNameVisible(true);

            // Equip with golden armor
            npcEntity.setItemSlot(EquipmentSlot.HEAD, CraftItemStack.asNMSCopy(new org.bukkit.inventory.ItemStack(Material.GOLDEN_HELMET)));
            npcEntity.setItemSlot(EquipmentSlot.CHEST, CraftItemStack.asNMSCopy(new org.bukkit.inventory.ItemStack(Material.GOLDEN_CHESTPLATE)));
            npcEntity.setItemSlot(EquipmentSlot.LEGS, CraftItemStack.asNMSCopy(new org.bukkit.inventory.ItemStack(Material.GOLDEN_LEGGINGS)));
            npcEntity.setItemSlot(EquipmentSlot.FEET, CraftItemStack.asNMSCopy(new org.bukkit.inventory.ItemStack(Material.GOLDEN_BOOTS)));
            npcEntity.setItemSlot(EquipmentSlot.MAINHAND, CraftItemStack.asNMSCopy(new org.bukkit.inventory.ItemStack(Material.GOLDEN_SWORD)));

            // Send packets to all online players
            for (Player player : Bukkit.getOnlinePlayers()) {
                sendNPCPackets((CraftPlayer) player);
            }

        } catch (Exception e) {
            plugin.getLogger().warning("Failed to create champion NPC: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void sendNPCPackets(CraftPlayer player) {
        if (npcEntity == null) return;

        ServerGamePacketListenerImpl connection = player.getHandle().connection;

        // Add player packet
        connection.send(new ClientboundPlayerInfoUpdatePacket(
                ClientboundPlayerInfoUpdatePacket.Action.ADD_PLAYER, npcEntity));

        // Spawn player packet
        connection.send(new ClientboundAddEntityPacket(npcEntity));

        // Head rotation packet
        connection.send(new ClientboundRotateHeadPacket(npcEntity, (byte) (npcEntity.getYRot() * 256.0F / 360.0F)));

        // Equipment packets
        List<com.mojang.datafixers.util.Pair<EquipmentSlot, ItemStack>> equipment = Arrays.asList(
                com.mojang.datafixers.util.Pair.of(EquipmentSlot.HEAD, npcEntity.getItemBySlot(EquipmentSlot.HEAD)),
                com.mojang.datafixers.util.Pair.of(EquipmentSlot.CHEST, npcEntity.getItemBySlot(EquipmentSlot.CHEST)),
                com.mojang.datafixers.util.Pair.of(EquipmentSlot.LEGS, npcEntity.getItemBySlot(EquipmentSlot.LEGS)),
                com.mojang.datafixers.util.Pair.of(EquipmentSlot.FEET, npcEntity.getItemBySlot(EquipmentSlot.FEET)),
                com.mojang.datafixers.util.Pair.of(EquipmentSlot.MAINHAND, npcEntity.getItemBySlot(EquipmentSlot.MAINHAND))
        );
        connection.send(new ClientboundSetEquipmentPacket(npcEntity.getId(), equipment));

        // Remove from tab list after a short delay
        Bukkit.getScheduler().runTaskLater(plugin, () -> {
            connection.send(new ClientboundPlayerInfoRemovePacket(Arrays.asList(npcEntity.getUUID())));
        }, 20L);
    }

    public void sendNPCToPlayer(Player player) {
        if (npcEntity != null && player.isOnline()) {
            sendNPCPackets((CraftPlayer) player);
        }
    }

    public void removeNPC() {
        if (npcEntity == null) return;

        // Send remove packets to all online players
        for (Player player : Bukkit.getOnlinePlayers()) {
            ServerGamePacketListenerImpl connection = ((CraftPlayer) player).getHandle().connection;

            // Remove entity packet
            connection.send(new ClientboundRemoveEntitiesPacket(npcEntity.getId()));

            // Remove from tab list
            connection.send(new ClientboundPlayerInfoRemovePacket(Arrays.asList(npcEntity.getUUID())));
        }

        npcEntity = null;
    }

    private ProfileProperty getSkinProperty(String playerName) {
        if (skinCache.containsKey(playerName)) {
            return skinCache.get(playerName);
        }

        try {
            String profileResponse = makeRequest(PROFILE_URL + playerName);
            if (profileResponse == null || profileResponse.isEmpty()) {
                return null;
            }

            JsonObject profileObject = JsonParser.parseString(profileResponse).getAsJsonObject();
            if (!profileObject.has("id")) {
                return null;
            }

            String uuid = profileObject.get("id").getAsString();
            String skinResponse = makeRequest(SKIN_URL.formatted(uuid));
            if (skinResponse == null || skinResponse.isEmpty()) {
                return null;
            }

            JsonObject skinObject = JsonParser.parseString(skinResponse).getAsJsonObject();
            if (!skinObject.has("properties")) {
                return null;
            }

            JsonObject properties = skinObject.get("properties").getAsJsonArray().get(0).getAsJsonObject();
            String value = properties.get("value").getAsString();
            String signature = properties.get("signature").getAsString();

            ProfileProperty property = new ProfileProperty("textures", value, signature);
            skinCache.put(playerName, property);

            return property;

        } catch (Exception e) {
            plugin.getLogger().warning("Failed to get skin for " + playerName + ": " + e.getMessage());
            return null;
        }
    }

    private String makeRequest(String url) {
        try (HttpClient client = HttpClient.newBuilder().build()) {
            HttpRequest request = HttpRequest.newBuilder().uri(URI.create(url)).build();
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            return response.body();
        } catch (IOException | InterruptedException e) {
            plugin.getLogger().warning("HTTP request failed: " + e.getMessage());
            return null;
        }
    }

    public void cleanup() {
        removeNPC();
        skinCache.clear();
    }

    // Helper class for skin properties
    public static class ProfileProperty {
        private final String name;
        private final String value;
        private final String signature;

        public ProfileProperty(String name, String value, String signature) {
            this.name = name;
            this.value = value;
            this.signature = signature;
        }

        public String getName() { return name; }
        public String getValue() { return value; }
        public String getSignature() { return signature; }
    }
}